<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>joker</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-04T09:41:54.509Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java多线程</title>
    <link href="http://example.com/2023/07/19/helloworld/"/>
    <id>http://example.com/2023/07/19/helloworld/</id>
    <published>2023-07-19T02:00:00.000Z</published>
    <updated>2023-12-04T09:41:54.509Z</updated>
    
    <content type="html"><![CDATA[<hr><p>以下是一个简单的Java多线程执行程序的示例代码，其中创建了两个线程，分别输出奇数和偶数：</p><blockquote><p>MultiThreadExample</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiThreadExample</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;       </span><br><span class="line"><span class="comment">// 创建两个线程        </span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">PrintOddNumbers</span>());        </span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">PrintEvenNumbers</span>());         </span><br><span class="line">    <span class="comment">// 启动线程</span></span><br><span class="line">thread1.start();       </span><br><span class="line">thread2.start();    </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><hr><p> PrintOddNumbers</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">PrintOddNumbers</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;      </span><br><span class="line">​            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;          </span><br><span class="line">​                 <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;              </span><br><span class="line">System.out.println(<span class="string">&quot;Odd number: &quot;</span> + i);          </span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><hr><p>PrintEvenNumbers</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrintEvenNumbers</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;     </span><br><span class="line">​          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;         </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= <span class="number">10</span>; i += <span class="number">2</span>) &#123;              </span><br><span class="line"> System.out.println(<span class="string">&quot;Even number: &quot;</span> + i);          </span><br><span class="line">   &#125; </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>在这个示例中，我们首先创建了一个<code>MultiThreadExample</code>类，并在其中定义了一个<code>main()</code>方法。在<code>main()</code>方法中，我们创建了两个线程，并将它们分别绑定到<code>PrintOddNumbers</code>和<code>PrintEvenNumbers</code>两个实现了<code>Runnable</code>接口的类上。接着，我们启动了这两个线程。</strong></p><p><strong><code>PrintOddNumbers</code>和<code>PrintEvenNumbers</code>类都实现了<code>Runnable</code>接口，这意味着它们必须定义一个<code>run()</code>方法。在<code>run()</code>方法中，我们定义了要执行的代码。在<code>PrintOddNumbers</code>类中，我们循环输出1到10之间的奇数，而在<code>PrintEvenNumbers</code>类中，我们循环输出2到10之间的偶数。</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;以下是一个简单的Java多线程执行程序的示例代码，其中创建了两个线程，分别输出奇数和偶数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MultiThreadExample&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java</summary>
      
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
